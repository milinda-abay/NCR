{
  "$schema": "https://developer.microsoft.com/json-schemas/fabric/item/report/definition/visualContainer/1.0.0/schema.json",
  "name": "85cef0fe3d5170b612e3",
  "position": {
    "x": 752,
    "y": 160,
    "z": 29000,
    "width": 528,
    "height": 464,
    "tabOrder": 30000
  },
  "visual": {
    "visualType": "funnelPlotNCR381CA03752129448ABADE097D6C4EA631_OrgStore",
    "query": {
      "queryState": {
        "hospital": {
          "projections": [
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "dim Hospital"
                    }
                  },
                  "Property": "NCRHospitalID"
                }
              },
              "queryRef": "dim Hospital.NCRHospitalID"
            }
          ]
        },
        "occurrence": {
          "projections": [
            {
              "field": {
                "Measure": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "Base Measures"
                    }
                  },
                  "Property": "MACCE (ih) without shock/ohca (N)"
                }
              },
              "queryRef": "Base Measures.MACCE (ih) without shock/ohca (N)",
              "nativeQueryRef": "MACCE (ih) without shock/ohca (N)"
            }
          ]
        },
        "population": {
          "projections": [
            {
              "field": {
                "Measure": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "Base Measures"
                    }
                  },
                  "Property": "Rows in DER without shock/ohca (D)"
                }
              },
              "queryRef": "Base Measures.Rows in DER without shock/ohca (D)",
              "nativeQueryRef": "Rows in DER without shock/ohca (D)"
            }
          ]
        },
        "state": {
          "projections": [
            {
              "field": {
                "Measure": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "Base Measures"
                    }
                  },
                  "Property": "FunnelPlotState"
                }
              },
              "queryRef": "Base Measures.FunnelPlotState",
              "nativeQueryRef": "FunnelPlotState"
            }
          ]
        }
      },
      "sortDefinition": {
        "sort": [
          {
            "field": {
              "Measure": {
                "Expression": {
                  "SourceRef": {
                    "Entity": "Base Measures"
                  }
                },
                "Property": "Rows in DER without shock/ohca (D)"
              }
            },
            "direction": "Descending"
          }
        ],
        "isDefaultSort": true
      }
    },
    "objects": {
      "rcv_script": [
        {
          "properties": {
            "source": {
              "expr": {
                "Literal": {
                  "Value": "'# Copyright (c) Microsoft Corporation.  All rights reserved.\n\n# Third Party Programs. This software enables you to obtain software applications from other sources. \n# Those applications are offered and distributed by third parties under their own license terms.\n# Microsoft is not developing, distributing or licensing those applications to you, but instead, \n# as a convenience, enables you to use this software to obtain those applications directly from \n# the application providers.\n# By using the software, you acknowledge and agree that you are obtaining the applications directly\n# from the third party providers and under separate license terms, and that it is your responsibility to locate, \n# understand and comply with those license terms.\n# Microsoft grants you no license rights for third-party software or applications that is obtained using this software.\n\n# See also:\n# http://stats.stackexchange.com/questions/5195/how-to-draw-funnel-plot-using-ggplot2-in-r/5210#5210\n\n# NCR/PTS enhancements\n# v0 - Micosoft Funnel Plot - free source - https://appsource.microsoft.com/en-us/product/power-bi-visuals/wa104381066?tab=overview\n# v1 - 2021-07-01: for initial prod release\n# v2 - 2022-01-07: Modified for Support Case 18\n# v3 - 2023-03-14: Modified for Support Cases 44 and 49\n\n############ User Parameters #########\n# Set of parameters from GUI\n\n##PBI_PARAM Color of scatterplot points\n#Type:string, Default:\"orange\", Range:NA, PossibleValues:\"orange\",\"blue\",\"green\",\"black\"\npointsCol = \"red\"\nif (exists(\"settings_scatter_params_pointColor\")) {\n  pointsCol = settings_scatter_params_pointColor\n}\n\n#PBI_PARAM Transparency of scatterplot points\n#Type:numeric, Default:0.4, Range:[0,1], PossibleValues:NA, Remarks: NA\ntransparency = 0.9\nif (exists(\"settings_scatter_params_percentile\")) {\n  transparency = settings_scatter_params_percentile / 100\n}\n\n##PBI_PARAM Color of baseline\n#Type:string, Default:\"blue\", Range:NA, PossibleValues:\"orange\",\"blue\",\"green\",\"black\"\nlineColor = \"black\"\nif (exists(\"settings_funnel_params_lineColor\")) {\n  lineColor = settings_funnel_params_lineColor\n}\n\n#PBI_PARAM Sparsification of scatterplot points\n#Type:bool, Default:TRUE, Range:NA, PossibleValues:NA, Remarks: NA\nsparsify = TRUE\nif (exists(\"settings_scatter_params_sparsify\")) {\n  sparsify = settings_scatter_params_sparsify\n}\n\n#PBI_PARAM Size of points on the plot\n#Type:numeric, Default: 1 , Range:[0.1,5], PossibleValues:NA, Remarks: NA\npointCex = 1\nif (exists(\"settings_scatter_params_weight\")) {\n  pointCex = min(50, max(settings_scatter_params_weight, 1)) / 10\n}\n\n#PBI_PARAM Confidence level line\n#Type:numeric, Default: 0.75 , Range:[0,1], PossibleValues:NA, Remarks: GUI input is predefined set of values\nconf1 = 0.975\nif (exists(\"settings_funnel_params_conf1\")) {\n  conf1 = as.numeric(settings_funnel_params_conf1)\n}\n\n#PBI_PARAM Confidence level line #2\n#Type:numeric, Default: 0.95 , Range:[0,1], PossibleValues:NA, Remarks: NA\nconf2 = 0.999\nif (exists(\"settings_funnel_params_conf2\")) {\n  conf2 = as.numeric(settings_funnel_params_conf2)\n}\n\naxisXisPercentage = TRUE # ratio or percentage \nif (exists(\"settings_axes_params_axisXisPercentage\")) {\n  axisXisPercentage = as.numeric(settings_axes_params_axisXisPercentage)\n}\n\nscaleXformat = \"comma\"\nif (exists(\"settings_axes_params_scaleXformat\")) {\n  scaleXformat = settings_axes_params_scaleXformat\n}\n\nscaleYformat = \"none\"\nif (exists(\"settings_axes_params_scaleYformat\")) {\n  scaleYformat = settings_axes_params_scaleYformat\n}\n\n#PBI_PARAM Size of labels on axes\nsizeLabel = 8\nif (exists(\"settings_axes_params_textSize\")) {\n  sizeLabel = settings_axes_params_textSize\n}\n\n#PBI_PARAM Size of ticks on axes \nsizeTicks = 6\nif (exists(\"settings_axes_params_sizeTicks\")) {\n  sizeTicks = as.numeric(settings_axes_params_sizeTicks)\n}\n\n#PBI_PARAM Size of labels on axes\ncolLabel = \"black\"\nif (exists(\"settings_axes_params_colLabel\")) {\n  colLabel = settings_axes_params_colLabel\n}\n\n#PBI_PARAM: export out data to HTML?\n#Type:logical, Default:FALSE, Range:NA, PossibleValues:NA, Remarks: NA\nkeepOutData = FALSE\nif (exists(\"settings_export_params_show\")) {\n  keepOutData = settings_export_params_show\n}\n\n#PBI_PARAM: method of export interface\n#Type: string , Default:\"copy\",  Range:NA, PossibleValues:\"copy\", \"download\",  Remarks: NA\nexportMethod = \"copy\"\nif (exists(\"settings_export_params_method\")) {\n  exportMethod = settings_export_params_method\n}\n\n#PBI_PARAM: limit the out table exported\n#Type: string , Default:1000,  Range:NA, PossibleValues:\"1000\", \"10000\", Inf,  Remarks: NA\nlimitExportSize = 1000\nif (exists(\"settings_export_params_limitExportSize\")) {\n  limitExportSize = as.numeric(settings_export_params_limitExportSize)\n}\n\n###############Library Declarations###############\n\n############### Utility functions ###############\nlibraryRequireInstall = function(packageName, ...)\n{\n  if(!require(packageName, character.only = TRUE)) \n    warning(paste(\"*** The package: ''\", packageName, \"'' was not installed ***\", sep=\"\"))\n}\n\nlibraryRequireInstall(\"XML\")\nlibraryRequireInstall(\"htmlwidgets\")\n\ninternalSaveWidget <- function(widget, fname)\n{\n  tempFname = paste(fname, \".tmp\", sep=\"\")\n  htmlwidgets::saveWidget(widget, file = tempFname, selfcontained = FALSE)\n  FlattenHTML(tempFname, fname)\n}\n\nFlattenHTML <- function(fnameIn, fnameOut)\n{\n  # Read and parse HTML file\n  # Embed all js and css files into one unified file\n  \n  if(!file.exists(fnameIn))\n    return(FALSE)\n  \n  dir = dirname(fnameIn)\n  html = htmlTreeParse(fnameIn, useInternal = TRUE)\n  top = xmlRoot(html)\n  \n  # extract all <script> tags with src value\n  srcNode=getNodeSet(top, ''//script[@src]'')\n  for (node in srcNode)\n  {\n    b = xmlAttrs(node)\n    fname = file.path(dir, b[''src''])\n    alternateSrc = FindSrcReplacement(fname)\n    if (!is.null(alternateSrc))\n    {\n      s = alternateSrc\n      names(s) = ''src''\n      newNode = xmlNode(\"script\",attrs = s)\n      replaceNodes(node, newNode)\n    }else{\n      str=ReadFileForEmbedding(fname);\n      if (!is.null(str))\n      {      \n        newNode = xmlNode(\"script\", str, attrs = c(type = \"text/javascript\"))\n        replaceNodes(node, newNode)\n      }\n    }\n  }\n  \n  # extract all <link> tags with src value\n  linkNode=getNodeSet(top, ''//link[@href]'')\n  for (node in linkNode)\n  {\n    b = xmlAttrs(node)\n    fname = file.path(dir, b[''href''])\n    str = ReadFileForEmbedding(fname, FALSE);\n    if (!is.null(str))\n    {\n      newNode = xmlNode(\"style\", str)\n      replaceNodes(node, newNode)\n    }\n  }\n  \n  saveXML(html, file = fnameOut)\n  return(TRUE)\n}\n\nReadFileForEmbedding <- function(fname, addCdata = TRUE)\n{\n  data = ReadFullFile(fname)\n  if (is.null(data))\n    return(NULL)\n\n  str = paste(data, collapse =''\\n'')\n  if (addCdata) {\n    str = paste(cbind(''// <![CDATA['', str,''// ]]>''), collapse =''\\n'')\n  }\n  return(str)\n}\n\nReadFullFile <- function(fname)\n{\n  if(!file.exists(fname))\n    return(NULL)\n  \n  con = file(fname, open = \"r\")\n  data = readLines(con)\n  close(con)\n  return(data)\n}\n\nFindSrcReplacement <- function(str)\n{\n  # finds reference to ''plotly'' js and replaces with a version from CDN\n  # This allows the HTML to be smaller, since this script is not fully embedded in it\n  str <- iconv(str, to=\"UTF-8\")\n  pattern = \"plotlyjs-(\\\\w.+)/plotly-latest.min.js\"\n  match1=regexpr(pattern, str)\n  attr(match1, ''useBytes'') <- FALSE\n  strMatch=regmatches(str, match1, invert = FALSE)\n  if (length(strMatch) == 0) return(NULL)\n  \n  pattern2 = \"-(\\\\d.+)/\"\n  match2 = regexpr(pattern2, strMatch[1])\n  attr(match2, ''useBytes'') <- FALSE\n  strmatch = regmatches(strMatch[1], match2)\n  if (length(strmatch) == 0) return(NULL)\n  \n  # CDN url is https://cdn.plot.ly/plotly-<Version>.js\n  # This matches the specific version used in the plotly package used.\n  verstr = substr(strmatch, 2, nchar(strmatch)-1)\n  str = paste(''https://cdn.plot.ly/plotly-'', verstr,''.min.js'', sep='''')\n  return(str)\n}\n#ReadFullFileReplaceString\nReadFullFileReplaceString <- function(fnameIn, fnameOut, sourceString,targetString)\n{\n  if(!file.exists(fnameIn))\n    return(NULL)\n  \n  tx  <- readLines(fnameIn)\n  tx2  <- gsub(pattern = sourceString, replace = targetString, x = tx)\n  writeLines(tx2, con = fnameOut)\n}\n#################################################\n\n#utils.r file with small general functions \n\nlibraryRequireInstall = function(packageName, ...)\n{\n  if(!require(packageName, character.only = TRUE)) \n    warning(paste(\"*** The package: ''\", packageName, \"'' was not installed ***\", sep=\"\"))\n}\n\n\n# Ecamone text string \n# if very very long abbreviate\n# if looooooong convert to lo...\n# if shorter than maxChar remove \ncutStr2Show = function(strText, strCex = 0.8, abbrTo = 100, isH = TRUE, maxChar = 3, partAvailable = 1)\n{\n  # partAvailable, wich portion of window is available, in [0,1]\n  if(is.null(strText))\n    return (NULL)\n  \n  SCL = 0.075*strCex/0.8\n  pardin = par()$din\n  gStand = partAvailable*(isH*pardin[1]+(1-isH)*pardin[2]) /SCL\n  \n  # if very very long abbreviate\n  if(nchar(strText)>abbrTo && nchar(strText)> 1)\n    strText = abbreviate(strText, abbrTo)\n  \n  # if looooooong convert to lo...\n  if(nchar(strText)>round(gStand) && nchar(strText)> 1)\n    strText = paste(substring(strText,1,floor(gStand)),\"...\",sep=\"\")\n  \n  # if shorter than maxChar remove \n  if(gStand<=maxChar)\n    strText = NULL\n  \n  return(strText) \n}\n\n#if it attributeColumn is legal colors() use them \n#if all the entries in attributeColumn are the same number - use defaultColor\n#if it has many numeric variables color from green to red range \n#if it has few unique strings - use rainbow to color them \nColorPerPoint = function (attributeColumn, defaultColor = pointsCol, sizeColRange = 30)\n{\n  N = length(attributeColumn)\n  if(sum(attributeColumn %in% colors()) == N) # all legal colors\n    return(attributeColumn)\n  \n  UN = length(unique(attributeColumn))\n  if(UN == 1) # single number \n    return(defaultColor)\n  \n  sortedUniqueValues = sort(unique(attributeColumn))\n  \n  if((UN > sizeColRange*3) || (UN >= N - 2 && is.numeric(attributeColumn))) # many numbers --> color range \n  {\n    rangeColors = terrain.colors(sizeColRange)# 30 colors\n    if(is.numeric(attributeColumn))\n    {\n      breaks = seq(min(sortedUniqueValues), max(sortedUniqueValues),length.out = sizeColRange + 1)\n      pointsCol = as.character(cut(attributeColumn, breaks,labels = rangeColors))\n      return(pointsCol)\n    }\n    else\n    {# spread colors\n      outCol = rep(rangeColors, each = ceiling(N/sizeColRange), length.out = N)\n      return(outCol)\n    }\n  } else {\n    rangeColors = rainbow(UN)\n    names(rangeColors) = sortedUniqueValues\n    return(rangeColors[as.character(attributeColumn)])\n  }\n}\n\n\n#randomly remove points from scatter if too many \nSparsifyScatter = function (xyDataFrame, numXstrips = 9, numYstrips = 7, minMaxPoints = c(3000,9000), minmaxInStrip =  c(900,9000), maxInCell = 300, remDuplicated = TRUE)\n{\n  \n  N_big = N = nrow(xyDataFrame)\n  usePoints = rep(TRUE,N)\n  \n  if(N <= minMaxPoints[1]) # do nothing\n    return (usePoints)\n  \n  if(remDuplicated) # remove duplicated\n  {\n    usePoints = usePoints & (!duplicated(xyDataFrame))\n    N = sum(usePoints)\n  }\n  \n  if(N <= minMaxPoints[1]) # do nothing\n    return (usePoints)\n  \n  rangeX = range(xyDataFrame[,1])\n  rangeY = range(xyDataFrame[,2])\n  \n  gridX = seq(rangeX[1],rangeX[2], length.out = numXstrips + 1)\n  gridY = seq(rangeY[1],rangeY[2], length.out = numYstrips + 1)\n  \n  #go cell by cell and sparsify \n  for (iX in seq(1,numXstrips))\n  {\n    smallRangeX = c(gridX[iX],gridX[iX+1])\n    inStrip = xyDataFrame[,1]>= smallRangeX[1] & xyDataFrame[,1]<= smallRangeX[2] &  usePoints\n    if(sum(inStrip) > minmaxInStrip[1])\n      for (iY in seq(1,numYstrips))\n      {\n        smallRangeY = c(gridY[iY],gridY[iY+1])\n        inCell = xyDataFrame[,2]>= smallRangeY[1] & xyDataFrame[,2]<= smallRangeY[2] &  inStrip\n        if(sum(inCell) > maxInCell)\n        {\n          inCellIndexes = seq(1,N_big)[inCell]\n          #randomly select maxInCell out of inCellIndexes\n          iii = sample(inCellIndexes,size = sum(inCell) - maxInCell, replace = FALSE)\n          usePoints[iii] = FALSE\n        }\n      }\n    \n  }\n  N = sum(usePoints)\n  \n  #if by the end still too many points --> go on whole set  \n  if(N > minMaxPoints[2])\n  {\n    inIndexes = seq(1,N_big)[usePoints]\n    #randomly select minMaxPoints[2] out of inIndexes\n    iii = sample(inIndexes,size = minMaxPoints[2], replace = FALSE)\n    usePoints[-iii] = FALSE\n    \n  }\n  return (usePoints)\n}\n\n# return FALSE if canvas is too small\ngoodPlotDimension = function(minWidthInch = 3,minHeightInch = 2.2)\n{\n  re = (par()$din[1] > minWidthInch) & (par()$din[2] > minHeightInch)\n  return(re)\n}\n\n\n\nlibraryRequireInstall(\"ggplot2\")\nlibraryRequireInstall(\"plotly\")\nlibraryRequireInstall(\"scales\")\nlibraryRequireInstall(\"caTools\")\n\n\n###############Internal parameters definitions#################\n# Set of parameters, which are not exported to GUI\n\n#PBI_PARAM is vertical plot\nverticalPlot = FALSE\n\n#PBI_PARAM Minimal number of points for funnel plot\nminPoints = 2\n\n#PBI_PARAM Size of warnings font\nsizeWarn = 11\n\n\n###############Internal functions definitions#################\n\n#paste tooltips together separated by <br>\ngenerateNiceTooltips = function(dataset) {\n  myNames = names(dataset)\n  LMN = length(myNames)\n  s = 1;\n  if (LMN > 2) s = 3\n\n  nms = myNames[s:LMN]\n  dta = dataset[, s:LMN]\n  niceTooltips = NULL\n\n  for (n in c(1:length(nms))) {\n    if (length(nms) == 1)\n      niceTooltips = paste(nms, \" = \", dta, sep = \"\")\n    else {\n      niceTooltips = paste(niceTooltips, nms[n], \" = \", dta[, n], sep = \"\")\n      if (n < length(nms))\n        niceTooltips = paste(niceTooltips, \"<br>\", sep = \"\")\n    }\n  }\n  return(niceTooltips)\n}\n\n#tweak the limits of the axis\nNiceLimitsAxis <- function(axisData, baseline = NULL, isPositive = TRUE) {\n  limsA = c(min(axisData), max(axisData)) # default\n  if (is.null(baseline))\n    baseline = sum(limsA) / 2\n\n  limsA = (limsA - mean(limsA)) * 1.3 + baseline # centralize\n  limsA[1] = min(limsA[1], min(axisData)) # include outliers\n  limsA[2] = max(limsA[2], max(axisData)) # include outliers\n  if (limsA[1] < 0 ) # don''t include region far away from 0\n  {\n    temp = -0.02 * (limsA[2])\n    limsA[1] = max(temp, limsA[1])\n  }\n  return(limsA)\n}\n\nConvertDF64encoding = function(df, withoutEncoding = FALSE) {\n  header_row <- paste(names(df), collapse = \", \")\n  tab <- apply(df, 1, function(x) paste(x, collapse = \", \"))\n\n  if (withoutEncoding) {\n    text <- paste(c(header_row, tab), collapse = \"\\n\")\n    x <- text\n  }\n  else {\n    text <- paste(c(header_row, tab), collapse = \"\\n\")\n    x <- caTools::base64encode(text)\n  }\n  return(x)\n}\n\nKeepOutDataInHTML = function(df, htmlFile = ''out.html'', exportMethod = \"copy\", limitExportSize = 1000) {\n  if (nrow(df) > limitExportSize)\n    df = df[1:limitExportSize,]\n\n  outDataString64 = ConvertDF64encoding(df)\n\n  linkElem = ''\\n<a href=\"\"  download=\"data.csv\"  style=\"position: absolute; top:0px; left: 0px; z-index: 20000;\" id = \"mydataURL\">export</a>\\n''\n  updateLinkElem = paste(''<script>\\n link_element = document.getElementById(\"mydataURL\");link_element.href = outDataString64href;'', ''\\n</script> '', sep = '' '')\n  var64 = paste(''<script> outDataString64 =\"'', outDataString64, ''\"; </script>'', sep = \"\")\n  var64href = paste(''<script> outDataString64href =\"data:;base64,'', outDataString64, ''\"; </script>'', sep = \"\")\n\n  buttonElem = ''<button style=\"position: absolute; top:0px; left: 0px; z-index: 20000;\"  onclick=\"myFunctionCopy(1)\">copy to clipboard</button>''\n  funcScript = ''<script> \n  function myFunctionCopy(is64) \n  {\n  const el = document.createElement(\"textarea\");\n  if(is64)\n  {\n  el.value = atob(outDataString64);\n  }\n  else\n  {\n  el.value = outDataStringPlane;\n  }\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);};\t\n  </script>''\n\n  if (exportMethod == \"copy\")\n    endOfBody = paste(var64, funcScript, buttonElem, ''\\n</body>'', sep = \"\")\n  else #\"download\"\n  endOfBody = paste(linkElem, var64, var64href, updateLinkElem, ''\\n</body>'', sep = \"\")\n\n  ReadFullFileReplaceString(''out.html'', ''out.html'', ''</body>'', endOfBody)\n}\n\n## define a helper function\nempty_as_na <- function(x){\n  if(\"factor\" %in% class(x)) x <- as.character(x) ## since ifelse wont work with factors\n  ifelse(as.character(x)!=\"\", x, NA)\n}\n\n\n############# Input validation & initializations ############# \n\nif (conf2 < conf1) # swap\n  { temp = conf1; conf1 = conf2; conf2 = temp }\n\nvalidToPlot = TRUE\n\npbiWarning = \"\"\n\ngpd = goodPlotDimension()\n\nif (validToPlot && !gpd) # too small canvas\n{\n  validToPlot = FALSE\n  pbiWarning1 = \"Visual is \"\n  pbiWarning1 = cutStr2Show(pbiWarning1, strCex = sizeWarn / 6, partAvailable = 0.9)\n  pbiWarning2 = \"too small \"\n  pbiWarning2 = cutStr2Show(pbiWarning2, strCex = sizeWarn / 6, partAvailable = 0.9)\n  pbiWarning <- paste(pbiWarning1, \"<br>\", pbiWarning2, sep = \"\")\n  sizeWarn = 8 #smaller \n}\n\nif (validToPlot) # validate input - required fields \n{\n  if (!exists(\"population\")) # invalid input \n  {\n    validToPlot = FALSE\n    pbiWarning1 = \"Population is required\"\n    pbiWarning = cutStr2Show(pbiWarning1, strCex = sizeWarn / 6, partAvailable = 0.9)\n  }\n  else\n  {\n    if (!exists(\"occurrence\")) # invalid input \n    {\n      validToPlot = FALSE\n      pbiWarning1 = \"Occurrence is required\"\n      pbiWarning = cutStr2Show(pbiWarning1, strCex = sizeWarn / 6, partAvailable = 0.9)\n    }\n    else\n    {\n      if (!exists(\"hospital\")) # invalid input \n      {\n        validToPlot = FALSE\n        pbiWarning1 = \"Hospital is required\"\n        pbiWarning = cutStr2Show(pbiWarning1, strCex = sizeWarn / 6, partAvailable = 0.9)\n      }\n      else\n      {\n        if (!exists(\"state\")) # invalid input \n        {\n          validToPlot = FALSE\n          pbiWarning1 = \"State is required\"\n          pbiWarning = cutStr2Show(pbiWarning1, strCex = sizeWarn / 6, partAvailable = 0.9)\n        }\n      }\n    }\n  }\n}\n\nif (validToPlot) {\n  population[population==\"\"] = NA\n  occurrence[occurrence==\"\"] = NA\n  population[length(population)==0] = NA\n  occurrence[length(occurrence)==0] = NA\n  population[is.na(population)] = 0\n  occurrence[is.na(occurrence)] = -1\n  population[is.null(population)] = 0\n  occurrence[is.null(occurrence)] = -1\n\n  #clean data\n  validData = rep(TRUE, nrow(population))\n  validData = as.logical(validData & (population > 1) & (occurrence >= 0) & (occurrence <= population))\n  validData <- na.omit(validData)\n}\n\nif (validToPlot && (sum(validData) < minPoints)) # not enough data samples\n{\n  validToPlot = FALSE\n  pbiWarning1 = \"Not enough data samples\"\n  pbiWarning1 = cutStr2Show(pbiWarning1, strCex = sizeWarn / 6, partAvailable = 0.9)\n  pbiWarning2 = \"for funnel plot\"\n  pbiWarning2 = cutStr2Show(pbiWarning2, strCex = sizeWarn / 6, partAvailable = 0.9)\n  pbiWarning <- paste(pbiWarning1, \"<br>\", pbiWarning2, sep = \"\")\n}\n\nif (validToPlot) # check packages\n{\n  si = sessionInfo()\n  namesPackages = c(names(si$otherPkgs), names(si$basePkgs), names(si$loadedOnly))\n  checkPackages = c(\"XML\", \"plotly\", \"ggplot2\", \"htmlwidgets\", \"scales\")\n  flagAllPackages = prod(checkPackages %in% namesPackages)\n\n  if (!flagAllPackages)\n    warning(\"*** Some of the packages are missing ! ***\")\n}\n\n############# Main code #####################\n\nif (validToPlot) {\n  # Load the data using the Visual dataRoles\n  # population is the base - number of cases\n  # occurrence is the measure being rated as percent of population\n  # state is the grouping of the scattered points - for color legend\n  # hospital is the points being scattered\n  dataset = cbind(population, occurrence, state, hospital)\n  \n  dataset = dataset[validData,] # keep only valid\n  colnames(dataset) <- c(\"Cases\", \"Rate\", \"State\", \"Hospital\")\n\n  # for axes and hovertext labels\n  lblCases = \"Cases\"\n  lblRate = \"Rate (%)\"\n  lblState = \"State\"\n  lblHospital = \"Hospital\"\n\n  countValue = dataset[, 1]\n  p = dataset[, 2] / dataset[, 1]\n  p.se <- sqrt((p * (1 - p)) / (countValue))\n  df <- data.frame(p, countValue, p.se)\n\n  mult = 1\n  if (axisXisPercentage) {\n    mult = 100\n  }\n\n  ## common effect (fixed effect model)\n  p.fem <- weighted.mean(sum(dataset[, 2])/sum(dataset[, 1])) * mult\n\n  ## lower and upper limits, based on FEM estimator\n  zLow = qnorm(conf1)\n  zUp = qnorm(conf2)\n  \n  number.seq <- dataset[, 1]\n\n  totalCases = sum(number.seq)\n\n  target_sd = sqrt((p.fem*0.9955)-(p.fem/totalCases))*10 \n\n  number.llconf1 <- p.fem - zLow * target_sd/sqrt(number.seq) \n  number.ulconf1 <- p.fem + zLow * target_sd/sqrt(number.seq) \n  number.llconf2 <- p.fem - zUp * target_sd/sqrt(number.seq) \n  number.ulconf2 <- p.fem + zUp * target_sd/sqrt(number.seq) \n\n  if (keepOutData) {\n    exportDF = dataset\n    exportDF$p = p * mult\n    exportDF$llconf1 <- p.fem - zLow * target_sd/sqrt(number.seq)\n    exportDF$ulconf1 <- p.fem + zLow * target_sd/sqrt(number.seq)\n    exportDF$llconf2 <- p.fem - zUp * target_sd/sqrt(number.seq)\n    exportDF$ulconf2 <-  p.fem + zUp * target_sd/sqrt(number.seq)\n  }\n\n  yAxis = round(p * mult, digits = 2)\n\n  #clean up yAxis data\n  yAxis[yAxis==\"\"] = 0\n  yAxis[is.na(yAxis)] = 0\n  yAxis[is.null(yAxis)] = 0\n\n  p.fem[is.na(p.fem)] = 0\n  p.fem[is.null(p.fem)] = 0\n\n  #tweak the limits of the y-axis\n  limsY = NiceLimitsAxis(axisData = yAxis, baseline = p.fem)\n  \n  dfCI <- data.frame(number.llconf1, number.ulconf1, number.llconf2, number.ulconf2, number.seq, p.fem)\n\n  # Axes labels\n  xLabText = cutStr2Show(lblCases, strCex = sizeLabel / 6, isH = TRUE, partAvailable = 0.85)\n  yLabText = cutStr2Show(lblRate, strCex = sizeLabel / 6, isH = FALSE, partAvailable = 0.85)\n\n  ## draw plot\n  drawPoints = SparsifyScatter(dataset, minMaxPoints = c(Inf, Inf))\n\n  df <- cbind(dataset,df)\n  \n  df[,2] <- yAxis \n\n  names(yAxis[drawPoints]) <- \"Rate\"\n  \n  fp <- ggplot(aes(x = Cases, y = Rate), data = df[drawPoints,])\n\n  # text property contains the hovertext for scatter points\n  fp <- fp + geom_point(aes(col = State, text = paste(lblState,\": \",State,\"<br>\",lblHospital,\": \",Hospital,\"<br>\",lblCases,\": \",Cases,\"<br>\",lblRate,\": \",format(round(as.numeric(Rate),1), nsmall=1), sep = \"\")), alpha = transparency, shape = 19, size = pointCex * 2)\n\n  fp <- fp + geom_line(aes(x = number.seq, y = number.llconf1), linetype = 1, colour = \"#81A5BE\", data = dfCI)\n  fp <- fp + geom_line(aes(x = number.seq, y = number.ulconf1), linetype = 1, colour = \"#81A5BE\", data = dfCI)\n\n  fp <- fp + geom_line(aes(x = number.seq, y = number.llconf2), linetype = 2, colour = \"#1D588B\", data = dfCI)\n  fp <- fp + geom_line(aes(x = number.seq, y = number.ulconf2), linetype = 2, colour = \"#1D588B\", data = dfCI)\n\n  fp <- fp + geom_hline(aes(yintercept = p.fem), data = dfCI, colour = lineColor, linetype = 4) #baseline\n \n  fp <- fp + scale_color_discrete(name = \"State\")\n\n  if (scaleYformat %in% c(\"none\"))\n    fp <- fp + scale_y_continuous(limits = limsY)\n\n  if (scaleYformat %in% c(\"comma\"))\n    fp <- fp + scale_y_continuous(limits = limsY, labels = comma)\n\n  if (scaleYformat %in% c(\"scientific\"))\n    fp <- fp + scale_y_continuous(limits = limsY, labels = scientific)\n\n  if (scaleXformat %in% c(\"comma\"))\n    fp <- fp + scale_x_continuous(labels = comma)\n\n  if (scaleXformat %in% c(\"dollar\"))\n    fp <- fp + scale_x_continuous(labels = dollar)\n\n  if (scaleXformat %in% c(\"scientific\"))\n    fp <- fp + scale_x_continuous(labels = scientific)\n\n  fp <- fp + xlab(xLabText) + ylab(yLabText) + theme_bw()\n\n  if (verticalPlot)\n    fp <- fp + coord_flip()\n\n} else {\n  # empty plot \n  fp <- ggplot()\n}\n\n#add warning as title\nfp = fp + labs(title = pbiWarning, caption = NULL) + theme_classic() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = sizeWarn),\n    axis.title = element_text(size = sizeLabel, colour = colLabel),\n    axis.text = element_text(size = sizeTicks),\n    panel.border = element_blank(),\n    axis.line = element_line(),\n    legend.title = element_text(size = 9, color = \"salmon\", face = \"bold\"),\n    legend.justification = c(0, 1),\n    legend.position = \"right\",\n    legend.background = element_blank(),\n    legend.key = element_blank()\n  )\n\nif (!validToPlot) # remove box from empty plot \n  fp = fp + theme(axis.line = element_blank())\n\n\n\n############# Create and save widget ###############\n\n# tooltip property overwrites the default hovertext for scatterpoints with text defined above\np = ggplotly(fp, tooltip = \"text\");\n\np <- config(\n  p, \n  staticPlot = FALSE, \n  editable = FALSE, \n  sendData = FALSE, \n  showLink = FALSE,\n  displaylogo = FALSE, \n  displayModeBar = FALSE,\n  cloud = FALSE, \n  autosizable = TRUE\n)\n\nif (validToPlot) {\n  # count off the scatter points\n  n = 1\n  maxscatter = n + length(unique(dataset$State))\n  n = maxscatter\n  \n  # then add tooltips on lines\n  p$x$data[[n]]$text = paste(as.character(conf1 * 100), \"% limits (l)\", sep = \"\")\n  p$x$data[[n + 1]]$text = paste(as.character(conf1 * 100), \"% limits (u)\", sep = \"\")\n  p$x$data[[n + 2]]$text = paste(as.character(conf2 * 100), \"% limits (l)\", sep = \"\")\n  p$x$data[[n + 3]]$text = paste(as.character(conf2 * 100), \"% limits (u)\", sep = \"\")\n  p$x$data[[n + 4]]$text = paste(\"baseline \", as.character(round(p.fem, 2)), sep = \"\")\n\n}\n\ninternalSaveWidget(p, ''out.html'')\n# resolve bug in plotly (margin of 40 px)\nReadFullFileReplaceString(''out.html'', ''out.html'', '',\"padding\":40,'', '',\"padding\":0,'')\n\nif (keepOutData)\n  KeepOutDataInHTML(df = exportDF, htmlFile = ''out.html'', exportMethod = exportMethod, limitExportSize = limitExportSize)\n\n####################################################\n'"
                }
              }
            }
          }
        }
      ]
    },
    "visualContainerObjects": {
      "title": [
        {
          "properties": {
            "show": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "text": {
              "expr": {
                "Literal": {
                  "Value": "'Rates of in-hospital MACCE without shock/OHCA'"
                }
              }
            },
            "fontColor": {
              "solid": {
                "color": {
                  "expr": {
                    "ThemeDataColor": {
                      "ColorId": 1,
                      "Percent": 0
                    }
                  }
                }
              }
            },
            "alignment": {
              "expr": {
                "Literal": {
                  "Value": "'center'"
                }
              }
            },
            "bold": {
              "expr": {
                "Literal": {
                  "Value": "false"
                }
              }
            },
            "heading": {
              "expr": {
                "Literal": {
                  "Value": "'Heading3'"
                }
              }
            },
            "fontFamily": {
              "expr": {
                "Literal": {
                  "Value": "'wf_standard-font, helvetica, arial, sans-serif'"
                }
              }
            },
            "fontSize": {
              "expr": {
                "Literal": {
                  "Value": "13D"
                }
              }
            }
          }
        }
      ],
      "background": [
        {
          "properties": {
            "show": {
              "expr": {
                "Literal": {
                  "Value": "false"
                }
              }
            }
          }
        }
      ]
    },
    "drillFilterOtherVisuals": true
  },
  "isHidden": true
}